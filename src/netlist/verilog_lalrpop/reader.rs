use std::fmt;
use lalrpop_util::{lalrpop_mod, ParseError};

lalrpop_mod!(pub grammar, "/netlist/verilog_lalrpop/grammar.rs");

#[derive(Debug, thiserror::Error)]
pub enum Error {
    #[error(transparent)]
    IoError(#[from] std::io::Error),
    #[error("Error while parsing Verilog netlist:\n{0}")]
    ParseError(String),
}

impl<L, T, E> From<ParseError<L, T, E>> for Error where
    L: fmt::Display,
    T: fmt::Display,
    E: fmt::Display, {
    fn from(sub: ParseError<L, T, E>) -> Self {
        Error::ParseError(sub.to_string())
    }
}

#[cfg(test)]
mod tests {
    use super::super::ast::*;
    use super::*;

    #[test]
    #[ignore]
    fn test_parse_verilog() {
        let test_verilog_code: &str = r#"
/* Generated by Yosys 0.25+0 (git sha1 c34d308bb, clang 14.0.0 -fPIC -Os) */
/* some comment */
module OR(A, B);
    input A, B;
    output C;
endmodule

// more comments
module NOT(A);
    input A;
endmodule

module mkPerm(CLK, RST_N, EN_state_out, state_out, RDY_state_out, state_in_i, state_in_rc,
EN_state_in, RDY_state_in);
  wire _0000_;
  wire _0001_;
  wire _0002_;
  wire _0003_;
  wire _0004_;
  wire _0005_;
  wire _0006_;
  wire _0007_;
  wire _0008_;
  wire _0009_;
  wire _0010_;
  wire _0011_;
  (*MASQ="secure"*) input [0:1234] data_in;
  input [3: 1] cc;
  (*MASQ="clock"*) input clk1;
  output [1:3] data_out;
  wire [1234:45] mywire;
  
  wire \escaped_name[[a]} ;
  
  wire t;
  OR _blabla_ ( .A(a), .B (b), .C(a) );
  XNOR blabla2 ( .A(netname), .B (1'b0) );
  
  wire t234;
  (* src = ".v:123" *)
  NOT #(
          .param1(1'h0),
          .param2(1'h1)
          )
      _072_ (
      .A(func_i[2]),
      .Y(_008_)
  );

endmodule
"#;

        let parser = grammar::NetlistParser::new();
        log::debug!("Parsing netlist with LALRPOP.");
        let result: Result<Vec<ModuleDeclaration>, _> = parser.parse(test_verilog_code);
        dbg!(&result);
        assert!(result.is_ok());
    }

    #[test]
    fn yosys_netlist() -> Result<(), Error> {
        let netlist_path = concat!(
        env!("CARGO_MANIFEST_DIR"),
        "/",
        "tests/Xoodyak/mkPerm_netlist.v"
        );
        let src = std::fs::read_to_string(netlist_path)?;
        let parser = grammar::NetlistParser::new();
        log::debug!("Parsing netlist with LALRPOP.");
        let modules = parser.parse(&src)?;
        println!("{:?}", modules);
        Ok(())
    }
}
