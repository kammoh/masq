use std::collections::HashMap;
use pest::Parser;
use pest_derive::Parser;
use simple_error::SimpleError;
use crate::netlist::json_netlist::{AttributeVal, Module};

#[derive(Parser)]
#[grammar = "netlist/verilog/verilog.pest"]
pub struct VerilogParser;

type Pair<'i> = pest::iterators::Pair<'i, Rule>;


#[inline]
fn parse_module(s: &str, p: Pair) -> (String, Module) {
    let mut inner = p.into_inner();

    let mut defs = Vec::new();
    let mut assigns = Vec::new();
    let mut cells = Vec::new();
    // for stmt in stmts {
    //     match stmt.as_rule() {
    //         Rule::wiredef => parse_and_push_wiredef(s, stmt, &mut defs),
    //         Rule::assign => assigns.push(parse_assign(s, stmt)),
    //         Rule::cell => cells.push(parse_cell(s, stmt)),
    //         _ => unreachable!()
    //     }
    // }
    (name, SVerilogModule{ ports, defs, assigns, cells })
}

pub fn parse_verilog(s: &str) -> Result<Verilog, SimpleError> {
    let parse_result = VerilogParser::parse(Rule::file, &s)?;
    Ok(Verilog {
        modules:
        parse_result.into_inner()
            .filter(|p| p.as_rule() != Rule::EOI)
            .map(|p| parse_module(&s, p)).collect()
    })
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn simple() {
        let verilog: &str = r#"
/* Generated by Yosys 0.25+0 (git sha1 c34d308bb, clang 14.0.0 -fPIC -Os) */
/* some comment */
module OR(A, B);
    input A, B;
    output C;
endmodule

// more comments
module NOT(A);
    input A;
endmodule

module mkPerm(CLK, RST_N, EN_state_out, state_out, RDY_state_out, state_in_i, state_in_rc,
EN_state_in, RDY_state_in);
  wire _0000_;
  wire _0001_;
  wire _0002_;
  wire _0003_;
  wire _0004_;
  wire _0005_;
  wire _0006_;
  wire _0007_;
  wire _0008_;
  wire _0009_;
  wire _0010_;
  wire _0011_;
  (*MASQ="secure"*) input [0:1234] data_in;
  input [3: 1] cc;
  (*MASQ="clock"*) input clk1;
  output [1:3] data_out;
  wire [1234:45] mywire;

  wire \escaped_name[[a]} ;

  wire t;
  OR _blabla_ ( .A(a), .B (b), .C(a) );
  XNOR blabla2 ( .A(netname), .B (1'b0) );

  wire t234;
  (* src = ".v:123" *)
  NOT #(
          .param1(1'h0),
          .param2(1'h1)
          )
      _072_ (
      .A(func_i[2]),
      .Y(_008_)
  );

endmodule
"#;

        let result = VerilogParser::parse(Rule::file, verilog).unwrap();
        println!("{:?}", result);
    }

    #[test]
    fn simple_fail() {}
}