// based on https://insights.sigasi.com/tech/systemverilog.ebnf

file = _{ SOI ~ (module_declaration)* ~ EOI }

module_declaration = {
    (
          (  attribute_instance* ~ module_keyword ~ module_identifier ~ list_of_ports ~ ";" ~ module_item* )
//           ( module_nonansi_header ~ timeunits_declaration? ~ module_item* )
//         | ( module_ansi_header    ~ timeunits_declaration? ~ non_port_module_item* )
    )  ~ "endmodule" ~ (":" ~ identifier)?
}

module_item = { non_port_module_item | port_declaration }
non_port_module_item = { module_or_generate_item | module_declaration }
module_or_generate_item = { attribute_instance* ~ (module_instantiation | module_common_item ) }

module_common_item = {module_or_generate_item_declaration | continuous_assign }

timeunits_declaration = {
    ("timeunit" ~ time_literal ~ ("/" ~ time_literal)? ~ ";")
    | ("timeprecision" ~ time_literal ~ ";")
    | ("timeunit" ~ time_literal ~ ";" ~ "timeprecision" ~ time_literal ~ ";")
    | ("timeprecision" ~ time_literal ~ ";" ~ "timeunit" ~ time_literal ~ ";")
}

time_literal = { (unsigned_number | fixed_point_number) ~ time_unit }
time_unit = { "s" | "ms" | "us" | "ns" | "ps" | "fs" }

module_nonansi_header = { attribute_instance* ~ module_keyword ~ module_identifier ~ parameter_port_list? ~ list_of_ports ~ ";" }
// module_ansi_header =    { attribute_instance* ~ module_keyword ~ module_identifier ~ parameter_port_list? ~ list_of_port_declarations? ~ ";" }

module_identifier = _{ identifier }
module_keyword = _{ "module" }
module_or_generate_item_declaration = { package_or_generate_item_declaration }
package_or_generate_item_declaration = { net_declaration }

continuous_assign = { "assign" ~ list_of_net_assignments ~ ";" }
list_of_net_assignments = { net_assignment ~ ("," ~ net_assignment)* }

net_assignment = { net_lvalue ~ "=" ~ expression }

net_lvalue = { identifier ~ constant_select }

parameter_port_list = { "#(" ~ ((list_of_param_assignments | parameter_port_declaration) ~ ("," ~ parameter_port_declaration)*)? ~ ")" }
parameter_port_declaration = {parameter_declaration | local_parameter_declaration}
local_parameter_declaration = { "localparam" ~ data_type_or_implicit ~ list_of_param_assignments }
parameter_declaration = { "parameter" ~ data_type_or_implicit ~ list_of_param_assignments }

data_type = {
    ( integer_vector_type ~ signing? ~ packed_dimension* )
}
// | non_integer_type
integer_vector_type = _{ "bit" | "logic" | "reg" }
// integer_atom_type = _{ "byte" | "shortint" | "int" | "longint"| "integer" | "time" }

// non_integer_type = _{ "shortreal"| "real"| "realtime" }
net_type = {
    "wire" | "tri"
//    | "supply0" | "supply1" | "triand" | "trior" | "trireg" | "tri0" | "tri1" | "uwire" | "wand " | "wor"
}

data_type_or_implicit = { data_type | implicit_data_type }
implicit_data_type = { signing? ~ packed_dimension* }
signing = _{ "signed" | "unsigned" }

list_of_param_assignments = { param_assignment ~ ("," ~ param_assignment)* }
param_assignment = { identifier ~ unpacked_dimension* ~ ("=" ~ constant_expression)? }
list_of_ports = { "(" ~ port ~ ( "," ~ port )* ~ ")" }

list_of_port_declarations = {"(" ~ attribute_instance* ~ ansi_port_declaration ~ ("," ~ attribute_instance* ~ ansi_port_declaration)* ~ ")" }

ansi_port_declaration = {
    port_direction? ~ "."  ~ identifier ~ "(" ~ expression? ~ ")"
}

port_declaration = { attribute_instance* ~ port_direction ~ net_port_type? ~ list_of_port_identifiers ~ ";" }
port = { port_expression | ("." ~ identifier ~ "("~ port_expression? ~ ")") }
port_expression = { port_reference ~ ( "," ~ port_reference )* }
port_reference = {identifier ~ constant_select?}

// FIXME:
net_port_type = { net_type? ~ data_type_or_implicit }

port_direction = { "input" | "output" | "inout" }

list_of_port_identifiers = { identifier ~ unpacked_dimension* ~ ("," ~ identifier ~ unpacked_dimension*)* }

bit_select = { "[" ~ expression ~ "]" }
constant_bit_select = { "[" ~ constant_expression ~ "]" }
constant_select = { ("." ~ identifier)? ~ constant_bit_select }
select = { bit_select }


// simplified
net_declaration = { net_type ~ data_type_or_implicit ~ list_of_net_decl_assignments ~ ";" }

list_of_net_decl_assignments = { net_decl_assignment ~ ("," ~ net_decl_assignment)* }
net_decl_assignment = { identifier ~ unpacked_dimension* ~ ( "=" ~ expression)? }

module_instantiation = {
    identifier ~ parameter_value_assignment? ~ hierarchical_instance ~ ("," ~ hierarchical_instance )* ~ ";"
}

parameter_value_assignment = {"#" ~ "(" ~ list_of_parameter_assignments? ~ ")" }
list_of_parameter_assignments = {
    (ordered_parameter_assignment ~ ("," ~ ordered_parameter_assignment)* )
    | (named_parameter_assignment ~ ("," ~ named_parameter_assignment)* )
}
ordered_parameter_assignment = { param_expression }
named_parameter_assignment = {"." ~ identifier ~ "(" ~ param_expression ~ ")" }
hierarchical_instance = { name_of_instance ~ "(" ~ list_of_port_connections? ~ ")" }

name_of_instance = { identifier ~ unpacked_dimension* }

list_of_port_connections = {
    ( ordered_port_connection ~ ("," ~ ordered_port_connection)* )
    | ( named_port_connection ~ ("," ~ named_port_connection)* )
}
ordered_port_connection = { attribute_instance* ~ expression }
named_port_connection = {
    attribute_instance* ~ "." ~ identifier ~ ( "(" ~ expression? ~ ")")?
}

param_expression = _{ expression }

expression = {
    primary
    |  (unary_operator ~ attribute_instance* ~ primary )
    | inc_or_dec_expression
    | ( "(" ~ operator_assignment ~ ")" )
    | (term ~ (binary_operator ~ attribute_instance* ~ expression)* )
//     | (expression ~ binary_operator ~ attribute_instance* ~ expression)
    // | conditional_expression
}

inc_or_dec_expression = {
    (inc_or_dec_operator ~ attribute_instance* ~ variable_lvalue)
    | (variable_lvalue ~ attribute_instance* ~ inc_or_dec_operator)
}

conditional_expression = { cond_predicate ~ "?" ~ attribute_instance* ~ expression ~ ":" ~ expression }

operator_assignment = {variable_lvalue ~ assignment_operator ~ expression}
assignment_operator = {"=" | "+="| "-="| "*="| "/="| "%="| "&="| "|="| "^="| "<<="| ">>="| "<<<="| ">>>="}
variable_lvalue = {
    hierarchical_identifier ~ select
}

cond_predicate = {expression}

term = { primary | (unary_operator ~ attribute_instance* ~ primary) }

binary_operator = {
    "+"|"-"|"*"|"/"|"%"
    |"=="|"!="|"==="|"!=="|"==?"|"!=?"
    |"&&"|"||"|"**"|"<"|"<="|">"|">="
    |"&"|"|"|"^"|"^~"|"~^"
    |">>"|"<<"|">>>"|"<<<"|"->"|"<->"
}
unary_operator = { "+" | "-" | "!" | "~" | "&" | "~&" | "|" | "~|" | "^" | "~^" | "^~" }
inc_or_dec_operator = { "++" | "â€“" }

primary = {
    primary_literal
    | (hierarchical_identifier ~ select?)
    | (concatenation ~ ("[" ~ range_expression ~ "]")? )
    | (multiple_concatenation ~ ("[" ~ range_expression ~ "]")? )
}
hierarchical_identifier = { "$root."? ~ (identifier ~ constant_bit_select ~ ".")* ~ identifier }
range_expression = { expression | part_select_range}
part_select_range = {constant_range| indexed_range}
indexed_range = { expression ~ ("+:" | "-:") ~ constant_expression }

concatenation = { "{" ~ expression ~ ("," ~ expression)* ~ "}" }
constant_concatenation = { "{" ~ constant_expression ~ ("," ~ constant_expression)* ~ "}" }
constant_multiple_concatenation = { "{" ~ constant_expression ~ constant_concatenation ~ "}" }
multiple_concatenation = { "{" ~ expression ~ concatenation ~ "}" }

unpacked_dimension = { slice | index }
slice = { "[" ~ constant_range ~ "]" }
index = { "[" ~ constant_expression ~ "]" }
packed_dimension = { slice | unsized_dimension}
unsized_dimension = { "[" ~ "]"}

attribute_instance = { "(*" ~ attr_spec ~ ("," ~ attr_spec)* ~ "*)" }
attr_spec = {identifier ~ ("=" ~ constant_expression)?  }

constant_expression = {
    constant_primary
 | (unary_operator ~ attribute_instance* ~ constant_primary )
//  | (constant_expression binary_operator { attribute_instance } constant_expression)
//  | (constant_expression "?" { attribute_instance } constant_expression ":" constant_expression)

 }
constant_range = { constant_expression ~ ":" ~ constant_expression }
constant_primary = _{ primary_literal }
primary_literal = _{ string_literal | number | unbased_unsized_literal }


number = _{ integral_number }
integral_number = { octal_number | binary_number | hex_number | decimal_number }

binary_number = @{ size? ~ binary_base ~ binary_value }
octal_number = @{ size? ~ octal_base ~ octal_value }
hex_number = @{ size? ~ hex_base ~ hex_value }
decimal_number = @{ (size? ~ decimal_base ~ unsigned_number) | unsigned_number }
unbased_unsized_literal = @{ "'0" | "'1" }
unsigned_number = @{ ASCII_DIGIT ~ ("_"|ASCII_DIGIT)* }
fixed_point_number = @{ unsigned_number ~ "." ~ unsigned_number }
non_zero_unsigned_number = @{ ASCII_NONZERO_DIGIT ~ ("_" | ASCII_DIGIT)* }
string_literal = @{ "\"" ~ (!"\"" ~ ASCII)* ~ "\"" }

size = _{ non_zero_unsigned_number }
binary_value = @{ ASCII_BIN_DIGIT ~ ("_" | ASCII_BIN_DIGIT)* }
octal_value = @{ ASCII_OCT_DIGIT ~ ("_" | ASCII_OCT_DIGIT)* }
hex_value = @{ ASCII_HEX_DIGIT ~ ("_" | ASCII_HEX_DIGIT)* }
sign = _{ "+" | "-" }
decimal_base = @{"'" ~ (^"s")? ~ ^"d" }
binary_base = @{"'" ~ (^"s")? ~ ^"b" }
octal_base = @{"'" ~ (^"s")? ~ ^"o" }
hex_base = @{"'" ~ (^"s")? ~ ^"h" }

simple_identifier = @{ (ASCII_ALPHA|"_") ~ (ASCII_ALPHANUMERIC|"_")* }
escaped_identifier = @{ "\\" ~ (!WHITESPACE ~ ASCII)* }
identifier = _{ simple_identifier | escaped_identifier }

BLOCK_COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
LINE_COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* }

COMMENT = _{ BLOCK_COMMENT | LINE_COMMENT }
WHITESPACE = _{ " " | "\t" | NEWLINE }